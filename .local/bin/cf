#!/usr/bin/python3

"""
https://github.com/MikeMirzayanov/testlib
- This seems to be the C++ checker that codeforces uses

https://github.com/cheran-senthil/PyRival
- Good to look at

"""

import argparse
import enum
import filecmp
import os
import re
import resource
import subprocess
import sys
from collections import namedtuple
from shutil import which as shutil_which


IDENT_FILE = ".codeforces"

FILE_FORMAT = namedtuple("File_Format", ["fstring", "regex"])
IN_FILE_FORMAT = FILE_FORMAT("in{ident}.txt", r"in\d+\.txt")
OUT_FILE_FORMAT = FILE_FORMAT("out{ident}.txt", r"out\d+\.txt")
OUT_RUN_FILE_FORMAT = FILE_FORMAT("out{ident}__run.txt", r"out\d+\.txt")


class Command(enum.Enum):
    NEW = "new"
    TEST = "test"

    @classmethod
    def run(cls, c_name: str, **kwargs) -> None:
        try:
            command = cls(c_name)
        except ValueError as e:
            print("[Error]:", e)
            sys.exit(1)

        # Run the command
        command(**kwargs)

    def __call__(self, **kwargs):
        match self:
            # NOTE: We are overloading with new command with two
            # functionalities: (1) create a new directory and content,
            # (2) creating new in/out files for testing.
            case Command.NEW:
                _command_new()
            case Command.TEST:
                _command_test(**kwargs)
            case _:
                assert False, f"Forgot to add match case for command: {self}"


def _command_new() -> None:
    def touch(*args) -> None:
        fpath = os.path.join(*args)
        with open(fpath, "w"): ...

    if not os.path.exists(IDENT_FILE):
        dir_name = input("Directory name: ")
        os.mkdir(dir_name)
        touch(dir_name, IDENT_FILE)
        for i in range(1, 4):
            touch(dir_name, IN_FILE_FORMAT.fstring.format(ident=i))
            touch(dir_name, OUT_FILE_FORMAT.fstring.format(ident=i))

        with open(os.path.join(dir_name, "main.py"), "w") as f:
            f.write(MAIN_PY)

        # Add rust fallback.
        # `rs_main.rs` instead of `main.rs` such that name doesn't clash
        # with `main.py` for easier tab completion
        touch(dir_name, "rs_main.rs")
        with open(os.path.join(dir_name, "rs_main.rs"), "w") as f:
            f.write(MAIN_RS)
        with open(os.path.join(dir_name, "Cargo.toml"), "w") as f:
            f.write(CARGO_TOML.format(dir_name=dir_name))

    else:
        num_pairs = 1
        for file in os.listdir():
            if re.match(IN_FILE_FORMAT.regex, file) is not None:
                num_pairs += 1

        # NOTE: Yes, could break but not if you always use this utility
        # script.
        touch(IN_FILE_FORMAT.fstring.format(ident=num_pairs))
        touch(OUT_FILE_FORMAT.fstring.format(ident=num_pairs))


def _command_test(**kwargs) -> None:
    if not os.path.exists(IDENT_FILE):
        print("`cd` into a codeforces directory first")
        return

    # We have in and out pairs and a few other files.
    estimate_in_out_files = len(os.listdir()) // 2
    for i in range(1, estimate_in_out_files+1):
        fname_in = IN_FILE_FORMAT.fstring.format(ident=i)
        if not os.path.exists(fname_in):
            # We know we generate 1..n so if for some i the file doesn't
            # exist, then we know i+1..n don't exist either.
            break
        elif os.stat(fname_in).st_size == 0:
            # Don't want to process an empty file
            continue

        with open(fname_in, "r") as f:
            fcontent = f.read()

        if kwargs["rust"]:
            subprocess_args = ["cargo", "run", "--release", "--quiet"]
            executable_name = "Rust"
        else:
            subprocess_args = [sys.executable, "main.py"]
            executable_name = "Python"

        # Do stop on first error, because if the returncode is not zero
        # then it will likely have been a syntax error or similar.
        try:
            p = subprocess.run(
                args=subprocess_args,
                capture_output=True,
                text=True,
                input=fcontent,
                check=True,
            )
        except subprocess.CalledProcessError as e:
            # e attributes: cmd, returncode, stdout, stderr, output
            print(f"[Error]: Something wrong when running `{executable_name}`")
            print("-- [ STDOUT ] ----------:")
            print(e.stdout)
            print("-- [ STDERR ] ----------:")
            print(e.stderr)
            return

        # Save output so we can inspect it.
        fname_out_run = OUT_RUN_FILE_FORMAT.fstring.format(ident=i)
        with open(fname_out_run, "w") as f:
            f.write(p.stdout)

        fname_out = OUT_FILE_FORMAT.fstring.format(ident=i)
        are_same = filecmp.cmp(fname_out, fname_out_run, shallow=False)
        if are_same:
            print(f"[✅ PASS ({executable_name})]: {fname_in} and {fname_out}")

            # Maximum resident set size used (in kilobytes)
            # See `man getrusage.2`
            print(
                "Maximum amount of memory used (in MB):",
                resource.getrusage(resource.RUSAGE_CHILDREN).ru_maxrss // 1e3,
            )
        else:
            print(f"[❌ FAIL ({executable_name})]: {fname_in} and {fname_out}")

            if os.getenv("NODIFF") is not None:
                return

            # Prettier diffs, quicker to spot the difference.
            if shutil_which("difft") is not None:
                # TODO: Annoying repeating line numbers...
                # `cargo install difftastic`
                print("[ Correct ]  ---  [My output]")
                subprocess.run(
                    f"difft <(nl {fname_out}) <(nl {fname_out_run})",
                    # To make sure it finds the difft executable
                    shell=True,
                    # So we can use the syntax as above
                    executable="/bin/bash",
                )
            else:
                # `diff` and `nl` should be included by default, but you
                # never know ;)
                if shutil_which("diff") is None or shutil_which("nl") is None:
                    print(
                        "[Error]: Can't display diffs. Make sure you have"
                        " `diff` and `nl` installed."
                    )
                    sys.exit()
                print("[ Correct ]  ---  [My output]")
                subprocess.run(
                    f"diff --side-by-side <(nl {fname_out}) <(nl {fname_out_run})",
                    shell=True,
                    # So we can use the syntax as above
                    executable="/bin/bash",
                )

def main():
    parser = argparse.ArgumentParser(
        prog="cf",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=(
            "Helps quickly submitting [C]ode[f]orces solutions.\n"
            "\n"
            "For prettier diffs install difftastic:\n"
            "\t`cargo install difftastic`\n"
            "Run with NODIFF=1 to turn off showing output diffs."
        ),
    )
    parser.add_argument(
        "command",
        # We want to output strings instead of enum options as
        # otherwise the CLI user will not understand what we want.
        choices=[c.value for c in Command],
        help="The supported commands",
    )
    parser.add_argument(
        "--rust",
        action="store_true",
        help="Flag to run the Rust script instead",
        dest="rust",
    )
    args = parser.parse_args()

    Command.run(args.command, rust=args.rust)


# All the way at the bottom to save your eyes.
MAIN_PY = """
from collections import *

import sys
input = sys.stdin.readline
MOD = 10**9 + 7

def read_array(factory):
    return [factory(num) for num in input().strip().split()]
def print_array(arr):
    print(" ".join(map(str, arr)))

def solve():
    return

if __name__ == "__main__":
    # Read in input:
    t = int(input())

    # Call solution:
    for _ in range(t):
        ans = solve()
        print(ans)

"""

MAIN_RS = """
use std::fmt;
use std::str;
use std::io;

#[allow(dead_code)]
static MOD: u64 = 10_u64.pow(9) + 7;

#[allow(dead_code)]
fn read_value<B, T>(lines: &mut io::Lines<B>) -> T
where
    B: io::BufRead,
    T: str::FromStr,
    <T as str::FromStr>::Err: fmt::Debug
{
    let line = lines.next().unwrap().unwrap();
    let value: T = line.trim().parse().unwrap();
    return value;
}

#[allow(dead_code)]
fn read_array<B, T>(lines: &mut io::Lines<B>) -> Vec<T>
where
    B: io::BufRead,
    T: str::FromStr,
    <T as str::FromStr>::Err: fmt::Debug
{
    let line = lines.next().unwrap().unwrap();
    let edge: Vec<T> = line.split(" ").map(|n| n.parse().unwrap()).collect();
    return edge;
}

#[allow(dead_code)]
fn print_array<T>(v: Vec<T>)
where
    T: fmt::Display
{
    let str = v.iter().map(|val| format!("{}", val)).collect::<Vec<String>>().join(" ");
    println!("{}", str);
}

fn solve() {
}

fn main() {
    let mut lines = io::stdin().lines();
    let t: u64 = read_value(&mut lines);

    for _i in 0..t {
        let edge: Vec<u64> = read_array(&mut lines);

        let ans = solve();
        println!("{}", ans);
    }
}
"""

CARGO_TOML = """
[package]
name = "{dir_name}"
version = "0.1.0"
edition = "2021"

[dependencies]

[[bin]]
name = "main"
path = "rs_main.rs"
"""


if __name__ == "__main__":
    main()
